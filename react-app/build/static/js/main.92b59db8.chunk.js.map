{"version":3,"sources":["firebase.js","product.js","productService.js","products.jsx","product-form.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fs","firestore","Product","data","this","id","name","cost","sell","url","calculateProfitAndRate","fees","ebay","paypal","profit","toFixed","rate","saveProduct","product","collection","add","then","console","log","err","getProducts","a","products","get","querySnapshot","forEach","doc","push","updateProduct","Products","state","handleInputChange","e","p","index","indexOf","target","value","splice","setState","className","style","overflowX","map","key","href","type","onChange","Component","ProductForm","initializeState","handleSubmit","preventDefault","onSubmit","htmlFor","App","Tabs","defaultActiveKey","Tab","eventKey","title","icon","faCog","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92b59db8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: 'AIzaSyDa8p-_oLGFp15segwFgq2CGAzFHX1j1_k',\r\n  authDomain: 'my-ecom-calc.firebaseapp.com',\r\n  databaseURL: 'https://my-ecom-calc.firebaseio.com',\r\n  projectId: 'my-ecom-calc',\r\n  storageBucket: 'my-ecom-calc.appspot.com',\r\n  messagingSenderId: '396043032363',\r\n  appId: '1:396043032363:web:4d6e1c4d43302c8251d76e'\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const fs = firebase.firestore();\r\n","export class Product {\r\n  profit;\r\n  rate;\r\n  constructor(data) {\r\n    this.id = data.id;\r\n    this.name = data.name;\r\n    this.cost = data.cost;\r\n    this.sell = data.sell;\r\n    this.url = data.url;\r\n    this.calculateProfitAndRate();\r\n  }\r\n\r\n  calculateProfitAndRate() {\r\n    let fees = feesProvider();\r\n    let ebay = this.sell * fees.ebay;\r\n    let paypal = this.sell * fees.paypal;\r\n\r\n    this.profit = (this.sell - this.cost - ebay - paypal).toFixed(2);\r\n    this.rate = ((this.profit / this.sell) * 100).toFixed(2);\r\n  }\r\n}\r\n\r\nfunction feesProvider() {\r\n  return { ebay: 0.0684, paypal: 0.0342 };\r\n}\r\n","import { fs } from './firebase';\r\nimport { Product } from './product';\r\nfunction saveProduct(product) {\r\n  const collectionRef = fs.collection('products');\r\n\r\n  collectionRef.add(product).then(\r\n    () => console.log('product saved !'),\r\n    err => console.log('an error occured :' + err)\r\n  );\r\n}\r\n\r\nasync function getProducts() {\r\n  const products = [];\r\n  await fs\r\n    .collection('products')\r\n    .get()\r\n    .then(querySnapshot => {\r\n      querySnapshot.forEach(doc => {\r\n        let product = new Product({ id: doc.id, ...doc.data() });\r\n        products.push(product);\r\n      });\r\n    });\r\n\r\n  return products;\r\n}\r\n\r\nasync function updateProduct(product) {}\r\n\r\nexport { saveProduct, getProducts, updateProduct };\r\n","import React, { Component } from 'react';\r\n\r\nimport './Products.css';\r\nimport { getProducts, updateProduct } from './productService';\r\n\r\nexport class Products extends Component {\r\n  state = {\r\n    products: []\r\n  };\r\n  async componentDidMount() {\r\n    this.setState({ products: await getProducts() });\r\n  }\r\n\r\n  handleInputChange = (e, p) => {\r\n    let products = [...this.state.products];\r\n    let index = products.indexOf(p);\r\n    const name = e.target.id;\r\n    const value = e.target.value;\r\n    p[name] = value;\r\n    p.calculateProfitAndRate();\r\n    products.splice(index, 1, p);\r\n    this.setState({ products });\r\n    updateProduct(p);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{ overflowX: 'auto' }}>\r\n        <h3 className=\"text-center\">Ecommerce calculator</h3>\r\n\r\n        <table className=\"table table-stripped table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Product</th>\r\n              <th>cost</th>\r\n              <th>sell</th>\r\n              <th>profit</th>\r\n              <th>rate</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.products.map(p => (\r\n              <tr key={p.id}>\r\n                <td>\r\n                  <a id=\"product\" href={p.url}>\r\n                    {p.name}\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    value={p.cost}\r\n                    id=\"cost\"\r\n                    type=\"number\"\r\n                    onChange={e => this.handleInputChange(e, p)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    value={p.sell}\r\n                    type=\"number\"\r\n                    id=\"sell\"\r\n                    onChange={e => this.handleInputChange(e, p)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <span id=\"profit\">{p.profit}</span>\r\n                </td>\r\n                <td>\r\n                  <span\r\n                    className={p.rate >= 10 ? 'goodRate' : 'badRate'}\r\n                    id=\"rate\"\r\n                  >\r\n                    {p.rate} %\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { saveProduct } from './productService';\r\n\r\nexport class ProductForm extends Component {\r\n  state = { name: '', url: '', cost: 0, sell: 0 };\r\n\r\n  initializeState = () => {\r\n    this.setState({ name: '', url: '', cost: 0, sell: 0 });\r\n  };\r\n  handleInputChange = ({ target }) => {\r\n    this.setState({\r\n      [target.id]: target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    saveProduct(this.state);\r\n  };\r\n  render() {\r\n    const { cost, sell, name, url } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"text-center text-nowrap\">Add new product</h3>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Product name</label>\r\n            <input\r\n              onChange={this.handleInputChange}\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"url\">URL</label>\r\n            <input\r\n              onChange={this.handleInputChange}\r\n              id=\"url\"\r\n              className=\"form-control\"\r\n              type=\"url\"\r\n              value={url}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"cost\">Cost</label>\r\n            <input\r\n              id=\"cost\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              value={cost}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"sell\">Sell</label>\r\n            <input\r\n              id=\"sell\"\r\n              className=\"form-control\"\r\n              type=\"number\"\r\n              value={sell}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </div>\r\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Save\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Products } from './products';\nimport { ProductForm } from './product-form';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Tabs defaultActiveKey=\"products\">\n        <Tab eventKey=\"products\" title=\"Products\">\n          <Products />\n        </Tab>\n        <Tab eventKey=\"productForm\" title=\"Product form\">\n          <ProductForm />\n        </Tab>\n        <Tab eventKey=\"config\" title={<FontAwesomeIcon icon={faCog} />}></Tab>\n      </Tabs>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}