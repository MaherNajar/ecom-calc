{"version":3,"sources":["firebase.js","fees.js","product.js","productService.js","products.jsx","product-form.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fs","firestore","Fees","ebay","paypal","localStorage","setItem","JSON","stringify","fees","getItem","parse","this","defaultFees","Product","init","id","name","url","cost","sell","Object","assign","getFees","toFixed","profit","getProducts","a","products","collection","get","then","querySnapshot","forEach","doc","product","data","push","saveProduct","createId","set","updateProduct","update","Products","state","save","handleInputChange","e","p","index","indexOf","target","value","splice","setState","handleSave","className","style","overflowX","icon","faSave","onClick","faTools","map","key","href","props","onSelectProduct","type","onChange","color","rate","Component","ProductForm","create","console","log","handleSubmit","preventDefault","isNew","onSubmit","selectedProduct","initialiseProduct","htmlFor","App","handleKey","handleSelectedProduct","Tabs","activeKey","onSelect","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da2bff7a.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: 'AIzaSyDa8p-_oLGFp15segwFgq2CGAzFHX1j1_k',\r\n  authDomain: 'my-ecom-calc.firebaseapp.com',\r\n  databaseURL: 'https://my-ecom-calc.firebaseio.com',\r\n  projectId: 'my-ecom-calc',\r\n  storageBucket: 'my-ecom-calc.appspot.com',\r\n  messagingSenderId: '396043032363',\r\n  appId: '1:396043032363:web:4d6e1c4d43302c8251d76e'\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const fs = firebase.firestore();\r\n","export class Fees {\r\n  static get defaultFees() {\r\n    return { ebay: 0.0684, paypal: 0.0342 };\r\n  }\r\n  static setFees(ebay, paypal) {\r\n    localStorage.setItem('fees', JSON.stringify({ ebay, paypal }));\r\n  }\r\n  static getFees() {\r\n    let fees = localStorage.getItem('fees');\r\n    if (fees) return JSON.parse(fees);\r\n    else return this.defaultFees;\r\n  }\r\n}\r\n","import { Fees } from './fees';\r\nexport class Product {\r\n  constructor(init) {\r\n    this.id = '';\r\n    this.name = '';\r\n    this.url = '';\r\n    this.cost = 0;\r\n    this.sell = 0;\r\n    Object.assign(this, init);\r\n  }\r\n  get profit() {\r\n    let fees = Fees.getFees();\r\n    let ebay = this.sell * fees.ebay;\r\n    let paypal = this.sell * fees.paypal;\r\n    return +(this.sell - this.cost - ebay - paypal).toFixed(2);\r\n  }\r\n  get rate() {\r\n    return +((this.profit / this.sell) * 100).toFixed(2);\r\n  }\r\n  get isNew() {\r\n    return this.id === '';\r\n  }\r\n}\r\n","import { fs } from './firebase';\r\nimport { Product } from './product';\r\n\r\nasync function getProducts() {\r\n  const products = [];\r\n  await fs\r\n    .collection('products')\r\n    .get()\r\n    .then(querySnapshot => {\r\n      querySnapshot.forEach(doc => {\r\n        let product = new Product({ id: doc.id, ...doc.data() });\r\n        products.push(product);\r\n      });\r\n    });\r\n\r\n  return products;\r\n}\r\n\r\nfunction saveProduct(product) {\r\n  let id = this.fs.createId();\r\n  const docRef = this.fs.doc(`products/${id}`);\r\n\r\n  docRef.set({ ...product, id });\r\n}\r\n\r\nfunction updateProduct(product) {\r\n  const docRef = this.fs.doc(`products/${product.id}`);\r\n  docRef.update({ ...product });\r\n}\r\n\r\nfunction deleteProduct(product) {\r\n  const docRef = this.fs.doc(`products/${product.id}`);\r\n  docRef.delete();\r\n}\r\n\r\nexport { getProducts, saveProduct, updateProduct, deleteProduct };\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTools, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport './Products.css';\r\nimport { getProducts, updateProduct } from './productService';\r\n\r\nexport class Products extends Component {\r\n  state = {\r\n    products: [],\r\n    save: true\r\n  };\r\n  async componentDidMount() {\r\n    this.setState({ products: await getProducts() });\r\n  }\r\n\r\n  handleInputChange = (e, p) => {\r\n    let products = [...this.state.products];\r\n    let index = products.indexOf(p);\r\n    const name = e.target.id;\r\n    const value = e.target.value;\r\n    p[name] = value;\r\n    products.splice(index, 1, p);\r\n    this.setState({ products, save: false });\r\n  };\r\n\r\n  handleSave = () => {\r\n    this.setState({ save: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\" style={{ overflowX: 'auto' }}>\r\n        <h3 className=\"text-center\">Ecommerce calculator</h3>\r\n        <FontAwesomeIcon\r\n          className={\r\n            this.state.save ? 'float-right icon' : 'float-right icon blinking'\r\n          }\r\n          icon={faSave}\r\n          onClick={this.handleSave}\r\n        />\r\n        <FontAwesomeIcon className=\"float-right icon\" icon={faTools} />\r\n        <table className=\"table table-stripped table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Product</th>\r\n              <th>Cost</th>\r\n              <th>Sell</th>\r\n              <th>Profit</th>\r\n              <th>Rate</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.products.map(p => (\r\n              <tr key={p.id}>\r\n                <td>\r\n                  <a\r\n                    href={p.href}\r\n                    onClick={() => this.props.onSelectProduct(p)}\r\n                    id=\"product\"\r\n                  >\r\n                    {p.name}\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    value={p.cost}\r\n                    id=\"cost\"\r\n                    type=\"number\"\r\n                    onChange={e => this.handleInputChange(e, p)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <input\r\n                    value={p.sell}\r\n                    type=\"number\"\r\n                    id=\"sell\"\r\n                    onChange={e => this.handleInputChange(e, p)}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <span id=\"profit\">{p.profit}</span>\r\n                </td>\r\n                <td>\r\n                  <span\r\n                    style={{ color: p.rate >= 10 ? 'green' : 'red' }}\r\n                    id=\"rate\"\r\n                  >\r\n                    {p.rate} %\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { saveProduct, updateProduct } from './productService';\r\nimport { Product } from './product';\r\n\r\nexport class ProductForm extends Component {\r\n  state = {\r\n    product: null\r\n  };\r\n  componentDidMount() {\r\n    let selectedProduct = this.props.selectedProduct;\r\n    console.log(selectedProduct);\r\n    this.initialiseProduct(selectedProduct);\r\n  }\r\n\r\n  initialiseProduct(product) {\r\n    if (product) this.setState({ product });\r\n    else this.setState({ product: new Product() });\r\n  }\r\n\r\n  handleInputChange = ({ target }) => {\r\n    let product = Object.create(new Product(), { ...this.state.product });\r\n    console.log(product);\r\n    product[target.id] = target.value;\r\n    console.log(product);\r\n    this.setState(product);\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    let { product } = this.state;\r\n    if (product.isNew) saveProduct(product);\r\n    else updateProduct(product);\r\n    this.props.onSubmit(1);\r\n  };\r\n\r\n  render() {\r\n    const { product: p } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"text-center text-nowrap\">Add new product</h3>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Product name</label>\r\n            <input\r\n              onChange={this.handleInputChange}\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              value={p?.name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"url\">URL</label>\r\n            <input\r\n              onChange={this.handleInputChange}\r\n              id=\"url\"\r\n              className=\"form-control\"\r\n              type=\"url\"\r\n              value={p?.url}\r\n            />\r\n          </div>\r\n          <input type=\"submit\" className=\"btn btn-primary\" value=\"Save\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { Products } from './products';\nimport { ProductForm } from './product-form';\nimport { Tab, Tabs } from 'react-bootstrap';\n\nexport default class App extends Component {\n  state = {\n    key: 1,\n    selectedProduct: null\n  };\n  handleKey = key => {\n    this.setState({ key });\n  };\n\n  handleSelectedProduct = selectedProduct => {\n    this.setState({ selectedProduct });\n    this.handleKey(2);\n  };\n\n  render() {\n    const { selectedProduct, key } = this.state;\n    return (\n      <Tabs activeKey={key} onSelect={this.handleKey}>\n        <Tab eventKey=\"1\" title=\"Products\">\n          <Products onSelectProduct={this.handleSelectedProduct} />\n        </Tab>\n        <Tab eventKey=\"2\" title=\"Product form\">\n          <ProductForm\n            selectedProduct={selectedProduct}\n            onSubmit={this.handleKey}\n          />\n        </Tab>\n      </Tabs>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}